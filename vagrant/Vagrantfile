# -*- mode: ruby -*-
# vi: set ft=ruby :

require './vagrant-provision-reboot-plugin'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/fedora-25"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
   # Display the VirtualBox GUI when booting the machine
   vb.gui = true
   # Customize the amount of memory on the VM:
   vb.memory = 2048
   # Customize CPU cap
   vb.customize ["modifyvm", :id, "--cpuexecutioncap", "70"]
   # Customize number of CPU
   vb.cpus = 2
   # Customize VM name
   vb.name = "CamFlow+LDFI"
  end

  # <NIK>
  # I've tried making this true and false, but there's no clear winner, 
  #  both ways it works and doesn't about 50% each.
  # Also, I always have to copy the latest version of 
  #  VBoxGuestAdditions.iso to /tmp/ each time I run this script.
  # I'm not sure how to automate that.
  config.vbguest.auto_update = true

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # <NIK>
  # I tried the long form installation of docker as seen in the shell part
  #  instead of this provisioning. Couldn't get it to work in this way.

  #config.vm.provision "docker"

  config.vm.provision "shell", inline: <<-SHELL
    # Phase 1. Install Docker and Camflow
    #sudo dnf -y update
    sudo dnf -y -v groupinstall 'Development Tools'
    sudo dnf -y -v install ncurses-devel cmake clang gcc-c++ wget git openssl-devel bc nano patch sparse flawfinder
    curl -fsSL https://get.docker.com/ | sh
    sudo usermod -aG docker `whoami`
    sudo systemctl enable docker.service
    sudo systemctl start docker
    git clone https://github.com/CamFlow/camflow-install.git
    cd camflow-install && sudo make all
    # boot by default to camflow
    sudo sed -i 's/saved/0/g' /etc/default/grub
    sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    # Phase 2. Run python scripts etc.
    cd ..
    git clone https://github.com/CamFlow/examples.git

    # <NIK>
    # Note that since the screen hangs up on a login screen at this point
    #  and a reboot is necessary for camflow to take effect.
    # I decided to comment out the follow commands so that they
    #  can be run by manually logging in.

    #cd examples/UCSC
    #make build
    #make network
    #make camflow
    #make run
    #make test
  SHELL

  config.vm.provision :unix_reboot
end
